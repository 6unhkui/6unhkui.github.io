{"componentChunkName":"component---src-templates-post-js","path":"/cs/infrastructure-architecture","result":{"data":{"site":{"siteMetadata":{"author":"Inkyung"}},"markdownRemark":{"fields":{"slug":"/cs/infrastructure-architecture"},"id":"f7316569-0e30-5085-b303-cf3cb387d344","excerpt":"인프라 아키텍쳐 인프라 : 기반이라는 뜻으로 생활을 지탱하는 바탕이나 토대 인프라 아키텍쳐 : IT 기반의 구조 집약형 & 분할형 아키텍쳐…","html":"<blockquote>\n<p><span role=\"img\" aria-label=\"pushpin\">📌</span> 그림으로 공부하는 인프라 아키텍쳐 책을 읽고 정리한 내용입니다.</p>\n</blockquote>\n<h1 id=\"인프라-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%94%84%EB%9D%BC-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"인프라 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인프라 아키텍쳐</h1>\n<ul>\n<li>인프라 : 기반이라는 뜻으로 생활을 지탱하는 바탕이나 토대</li>\n<li>인프라 아키텍쳐 : <strong>IT 기반의 구조</strong></li>\n</ul>\n<h2 id=\"집약형--분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%A7%91%EC%95%BD%ED%98%95--%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"집약형  분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>집약형 &#x26; 분할형 아키텍쳐</h2>\n<h3 id=\"1-집약형-아키텍쳐\" style=\"position:relative;\"><a href=\"#1-%EC%A7%91%EC%95%BD%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"1 집약형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 집약형 아키텍쳐</h3>\n<p>주요 업무는 모두 <strong>한대의 대형 컴퓨터로 처리</strong>하는 것 (심장 전략)</p>\n<p>컴퓨터를 구성하는 주요 부품은 다중화 되어있어 하다가 고장나더라도 업무는 계속 할 수 있음.</p>\n<p>e.g. 주로 기간 시스템이라고 불리는 기업 내 핵심 업무 시스템에서 이용하는 경우가 많음</p>\n<ul>\n<li>장점</li>\n<li>한대의 컴퓨터만 있으면 되므로 구성이 간단하다.</li>\n<li>대형 컴퓨터의 리소스 관리나 이중화에 의해 안전성이 높고 고성능이다.</li>\n<li>단점</li>\n<li>대형 컴퓨터의 도입 비용과 유지 비용이 크다</li>\n<li>확정성에 한계가 있다.</li>\n</ul>\n<h3 id=\"2-분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#2-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"2 분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 분할형 아키텍쳐</h3>\n<p>대형 컴퓨터가 했던 처리를 <strong>다수의 소형 컴퓨터로 분할 처리</strong> (신장 전략)</p>\n<p>표준 OS나 개발 언어를 이용하기 때문에 '오픈 시스템' 이라고도 부름.</p>\n<p>또한 여러대의 컴퓨터를 연결해서 이용하기 때문에 '분산 시스템' 이라고 부르는 경우도 있다.</p>\n<ul>\n<li>장점</li>\n<li>낮은 비용으로 시스템을 구축 할 수 있다.</li>\n<li>서버의 대수를 늘릴 수 있어 확장성이 높다</li>\n<li>단점</li>\n<li>대수가 늘어나면 관리 구조가 복잡해진다.</li>\n<li>한대가 망가지면 영향 범위를 최소화 하기 위한 구조를 검토해야 한다.</li>\n</ul>\n<h2 id=\"물리적-서버--논리적-서버\" style=\"position:relative;\"><a href=\"#%EB%AC%BC%EB%A6%AC%EC%A0%81-%EC%84%9C%EB%B2%84--%EB%85%BC%EB%A6%AC%EC%A0%81-%EC%84%9C%EB%B2%84\" aria-label=\"물리적 서버  논리적 서버 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>물리적 서버 &#x26; 논리적 서버</h2>\n<ul>\n<li>서버 : 특정한 역할에 특화된 것</li>\n<li>물리 서버 : 컴퓨터 자체(<strong>하드웨어</strong>)</li>\n<li>논리 서버 : 컴퓨터에서 동작하고 있는 <strong>소프트웨어</strong> e.g. DB 서버, 웹 서버..</li>\n</ul>\n<h2 id=\"수직-분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%A7%81-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"수직 분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수직 분할형 아키텍쳐</h2>\n<h3 id=\"1-클라이언트---서버형-아키텍쳐-cs\" style=\"position:relative;\"><a href=\"#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8---%EC%84%9C%EB%B2%84%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-cs\" aria-label=\"1 클라이언트   서버형 아키텍쳐 cs permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 클라이언트 - 서버형 아키텍쳐 (C/S)</h3>\n<p>클라이언트(=단말, 소형 컴퓨터) 측에 전용 소프트웨어를 설치함. 화면 표시나 단순 계산을 클라이언트(단말)에서 실행하고, 필요한 경우 서버에 의뢰함. 클라이언트-서버가 역할 별로 분할(수직 분할) 되어 있음.</p>\n<ul>\n<li>장점</li>\n<li>클라이언트 측에 많은 처리를 실행 할 수 있어서 소수의 서버로 다수의 클라이언트를 처리 할 수 있음</li>\n<li>단점</li>\n<li>클라리언트 측의 소프트웨어 정기 업데이트가 필요. (사용자가 업데이트를 반드시 한다는 보장이 없어, 시스템 위험 요소가 될 수 있음)</li>\n<li>서버 확장성에 한계가 발생 할 수 있음</li>\n</ul>\n<h3 id=\"2-3계층형-아키텍쳐\" style=\"position:relative;\"><a href=\"#2-3%EA%B3%84%EC%B8%B5%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"2 3계층형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 3계층형 아키텍쳐</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">     **웹 서버**                      **AP 서버**                    **DB 서버**  \n+--------------+.           +--------------+           +----------+\n| 프레젠테이션 계층 | &lt;-------&gt; | 애플리케이션 계층 | &lt;-------&gt; | 데이터 계층 |\n+--------------+.           +--------------+.          +----------+\n- 사용자 입력을 받는다.          - 사용자 요청에 따라         - 애플리케이션 요청에 따라\n- 웹 브라우저 화면을 표시한다        업무를 처리한다.            데이터 입출력을 한다.            </code></pre></div>\n<ul>\n<li>장점</li>\n<li>서버 부하 집중 개선</li>\n<li>클라이언트 단말의 정기 업데이트가 불필요 (클라이언트는 브라우저만 있으면 됨)</li>\n<li>'처리 반환'에 의한 서버 부하 저감</li>\n<li>단점</li>\n<li>구조가 c/s 구성보다 복잡</li>\n</ul>\n<h2 id=\"수평-분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%88%98%ED%8F%89-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"수평 분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수평 분할형 아키텍쳐</h2>\n<h3 id=\"1-단순-수평-분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#1-%EB%8B%A8%EC%88%9C-%EC%88%98%ED%8F%89-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"1 단순 수평 분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 단순 수평 분할형 아키텍쳐</h3>\n<p>시스템을 둘로 분할하여, 시스템 전체 처리 성능을 두배로 향상시킴. 또한, 두개의 독립된 시스템이 생성되기에 A측 시스템 장애가 발생해도 B측 시스템에는 전혀 영향을 주지 않음</p>\n<p>하지만 A와 B가 같은 애플리케이션을 이용하고 있다면 애플리케이션 업데이트를 양쪽 시스템에 매번 실시해주어야 한다.</p>\n<p>데이터도 A와 B가 따로 보유하고 있어, 양쪽 데이터를 동시에(일원화해서) 이용 할 수 없음.</p>\n<p>한쪽 시스템에 이용자가 대부분 몰리는 경우, 한쪽에만 과부하가 걸리고 리소스가 낭비됨</p>\n<p>이 구조는 주로 지리적으로 멀리 떨어진 시스템에 이용됨. e.g. 공장처럼 각 지점이 완전히 독립적으로 운영될 경우</p>\n<ol>\n<li>분할한 시스템이 독립적으로 운영되므로 서로에게 영향을 주지 않음</li>\n<li>장점</li>\n<li>수평으로 서버를 늘리기 때문에 확장성이 향상됨</li>\n<li>단점</li>\n<li>데이터를 일원화해서 볼 수 없다</li>\n<li>애플리케이션 업데이트는 양쪽을 동시에 해주어야 한다</li>\n</ol>\n<h3 id=\"2-공유형-아키텍쳐\" style=\"position:relative;\"><a href=\"#2-%EA%B3%B5%EC%9C%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"2 공유형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 공유형 아키텍쳐</h3>\n<p>단순 분할형과 달리 일부 계층에서 상호 접속이 이루어짐 (e.g. 데이터를 동기 처리)</p>\n<ul>\n<li>장점</li>\n<li>수평으로 서버를 늘리기때문에 확장성이 향상</li>\n<li>분할한 시스템이 서로 다른 시스템에 데이터를 참조 할 수 있다.</li>\n<li>단점</li>\n<li>분할한 시스템간 독립성이 낮아진다</li>\n<li>공유한 계층의 확장성이 낮아진다.</li>\n</ul>\n<h2 id=\"가상화-구성\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94-%EA%B5%AC%EC%84%B1\" aria-label=\"가상화 구성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상화 구성</h2>\n<p>하나의 물리서버에 여러대의 가상화 서버를 운영하며, 이 물리 서버도 이중화하여 한대가 망가지더라도 계속 운영 가능</p>\n<h2 id=\"지리-분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EB%A6%AC-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"지리 분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지리 분할형 아키텍쳐</h2>\n<h3 id=\"1-스탠바이형-아키텍쳐\" style=\"position:relative;\"><a href=\"#1-%EC%8A%A4%ED%83%A0%EB%B0%94%EC%9D%B4%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"1 스탠바이형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 스탠바이형 아키텍쳐</h3>\n<p>물리 서버를 최소 두대 이상 준비하여 한대가 고장나면 가동중인 소프트웨어를 다른 한대로 옮겨서 운영하는 방식</p>\n<p>이때, 소프트웨어 재시작을 자동으로 하는 구조를 <strong>페일오버(failover)</strong> 라고 한다.</p>\n<ul>\n<li>스탠바이 서버가 액티브 서버에 계속 하트비트를 날리며 상태를 체크함. 응답이 없을 경우 문제가 생긴 것으로 간주하고 스탠바이 서버를 기동함</li>\n</ul>\n<p>물리 서버 고장에는 대처 할 수 있지만 보통 때는 페일오버 대상 서버(스탠바이)가 놀고 있는 상태가 되기 때문에 리소스 측면에서 낭비 발생</p>\n<p>이 문제를 해결하기 위해 스탠바이를 따로 두지 않고 양쪽 서버를 동시에 교차 이용(한쪽이 고장나면 다른 한쪽이 양쪽을 처리) 하는 경우도 많다.</p>\n<h3 id=\"2-재난-대책형-아키텍쳐\" style=\"position:relative;\"><a href=\"#2-%EC%9E%AC%EB%82%9C-%EB%8C%80%EC%B1%85%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"2 재난 대책형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 재난 대책형 아키텍쳐</h3>\n<p>서버 장비를 최소 구성 및 동시 구성으로 별도 사이트에 배치하고 소프트웨어 상용 환경과 동일하게 설정한다. 재난 발생 시, 전혀 다른 사이트에 있는 정보를 이용하게 됨. 여기서 중요한 건 애플리케이션 최신 화와 데이터 최신 화이다.</p>\n<h2 id=\"클라우드형-아키텍쳐\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"클라우드형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라우드형 아키텍쳐</h2>\n<p>서버가 가상화 돼 있어서 사용자는 어느 물리 서버에서 동작하는지 모른다.</p>\n<p>클라우드 세계에서는 어떤 계층을 클라우드 상에 배치하는가에 따라 명칭이 달라진다.</p>\n<ul>\n<li>SaaS :  서버 뿐만 아니라 애플리케이션을 포함한 업무 시스템을 클라우드 서비스 회사가 제공하기 때문에, 사용자는 인프라를 의식할 필요가 없다.</li>\n<li>반면 PaaS(Platform as a Service), IaaS(Infrastructure as a Service), DBaaS(Database as s Service) 등에서는 일반적인 3계층형 시스템을 구성하는 서버의 일부 혹은 전부를 클라우드 상의 리소스로 대체한다.</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/cs/infrastructure-architecture/#%EC%9D%B8%ED%94%84%EB%9D%BC-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">인프라 아키텍쳐</a></p>\n<ul>\n<li>\n<p><a href=\"/cs/infrastructure-architecture/#%EC%A7%91%EC%95%BD%ED%98%95--%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">집약형 &#x26; 분할형 아키텍쳐</a></p>\n<ul>\n<li><a href=\"/cs/infrastructure-architecture/#1-%EC%A7%91%EC%95%BD%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">1. 집약형 아키텍쳐</a></li>\n<li><a href=\"/cs/infrastructure-architecture/#2-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">2. 분할형 아키텍쳐</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/infrastructure-architecture/#%EB%AC%BC%EB%A6%AC%EC%A0%81-%EC%84%9C%EB%B2%84--%EB%85%BC%EB%A6%AC%EC%A0%81-%EC%84%9C%EB%B2%84\">물리적 서버 &#x26; 논리적 서버</a></li>\n<li>\n<p><a href=\"/cs/infrastructure-architecture/#%EC%88%98%EC%A7%81-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">수직 분할형 아키텍쳐</a></p>\n<ul>\n<li><a href=\"/cs/infrastructure-architecture/#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8---%EC%84%9C%EB%B2%84%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-cs\">1. 클라이언트 - 서버형 아키텍쳐 (C/S)</a></li>\n<li><a href=\"/cs/infrastructure-architecture/#2-3%EA%B3%84%EC%B8%B5%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">2. 3계층형 아키텍쳐</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/cs/infrastructure-architecture/#%EC%88%98%ED%8F%89-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">수평 분할형 아키텍쳐</a></p>\n<ul>\n<li><a href=\"/cs/infrastructure-architecture/#1-%EB%8B%A8%EC%88%9C-%EC%88%98%ED%8F%89-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">1. 단순 수평 분할형 아키텍쳐</a></li>\n<li><a href=\"/cs/infrastructure-architecture/#2-%EA%B3%B5%EC%9C%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">2. 공유형 아키텍쳐</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/infrastructure-architecture/#%EA%B0%80%EC%83%81%ED%99%94-%EA%B5%AC%EC%84%B1\">가상화 구성</a></li>\n<li>\n<p><a href=\"/cs/infrastructure-architecture/#%EC%A7%80%EB%A6%AC-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">지리 분할형 아키텍쳐</a></p>\n<ul>\n<li><a href=\"/cs/infrastructure-architecture/#1-%EC%8A%A4%ED%83%A0%EB%B0%94%EC%9D%B4%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">1. 스탠바이형 아키텍쳐</a></li>\n<li><a href=\"/cs/infrastructure-architecture/#2-%EC%9E%AC%EB%82%9C-%EB%8C%80%EC%B1%85%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">2. 재난 대책형 아키텍쳐</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/infrastructure-architecture/#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">클라우드형 아키텍쳐</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"IT Infra Architecture","date":"July 29, 2020","category":"Infra","tags":["IT","Infra"],"featuredImage":null}}},"pageContext":{"slug":"/cs/infrastructure-architecture","previous":{"id":"de65ed12-87cc-53bc-84cf-a42695784767","fields":{"slug":"/project/gatsby-blog-feature"},"frontmatter":{"title":"기능 추가하기","tags":["Gatsby","React","Blog"]}},"next":{"id":"fd5f067a-ff4d-5bd3-917d-9a8020ca648a","fields":{"slug":"/cs/data-structure"},"frontmatter":{"title":"Queue, Stack","tags":["Data Structure"]}}}}}