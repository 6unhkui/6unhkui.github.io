{"componentChunkName":"component---src-templates-post-tsx","path":"/cs/book-it-infra","result":{"data":{"site":{"siteMetadata":{"author":"Inkyung"}},"markdownRemark":{"fields":{"slug":"/cs/book-it-infra"},"id":"8b74e814-7da0-5aea-a16d-839641f2ddcd","excerpt":"그림으로 공부하는 IT 인프라 구조를 읽고 학습한 내용을 간략하게 정리한 글입니다.\n개발자에게 필요한 IT…","html":"<blockquote>\n<p><a href=\"http://www.yes24.com/Product/Goods/19041948\" target=\"_blank\" rel=\"noreferrer noopener\">그림으로 공부하는 IT 인프라 구조</a>를 읽고 학습한 내용을 간략하게 정리한 글입니다.<br/>\n개발자에게 필요한 IT 인프라 지식을 공부하는데 굉장히 좋은 책입니다. 상세한 내용은 책을 참고해주세요.</p>\n</blockquote>\n<h1 id=\"인프라-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%94%84%EB%9D%BC-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"인프라 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인프라 아키텍쳐</h1>\n<ul>\n<li>인프라 : 기반이라는 뜻으로 생활을 지탱하는 바탕이나 토대</li>\n<li>인프라 아키텍쳐 : <strong>IT 기반의 구조</strong></li>\n</ul>\n<h2 id=\"집약형--분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%A7%91%EC%95%BD%ED%98%95--%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"집약형  분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>집약형 &#x26; 분할형 아키텍쳐</h2>\n<h3 id=\"1-집약형-아키텍쳐\" style=\"position:relative;\"><a href=\"#1-%EC%A7%91%EC%95%BD%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"1 집약형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 집약형 아키텍쳐</h3>\n<p>주요 업무는 모두 <strong>한대의 대형 컴퓨터로 처리</strong>하는 것 (심장 전략)</p>\n<p>컴퓨터를 구성하는 주요 부품은 다중화 되어있어 하다가 고장나더라도 업무는 계속 할 수 있음.</p>\n<p>e.g. 주로 기간 시스템이라고 불리는 기업 내 핵심 업무 시스템에서 이용하는 경우가 많음</p>\n<ul>\n<li><strong>장점</strong></li>\n<li>한대의 컴퓨터만 있으면 되므로 구성이 간단하다.</li>\n<li>대형 컴퓨터의 리소스 관리나 이중화에 의해 안전성이 높고 고성능이다.</li>\n<li><strong>단점</strong></li>\n<li>대형 컴퓨터의 도입 비용과 유지 비용이 크다</li>\n<li>확정성에 한계가 있다.</li>\n</ul>\n<h3 id=\"2-분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#2-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"2 분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 분할형 아키텍쳐</h3>\n<p>대형 컴퓨터가 했던 처리를 <strong>다수의 소형 컴퓨터로 분할 처리</strong> (신장 전략)</p>\n<p>표준 OS나 개발 언어를 이용하기 때문에 '오픈 시스템' 이라고도 부름.</p>\n<p>또한 여러대의 컴퓨터를 연결해서 이용하기 때문에 '분산 시스템' 이라고 부르는 경우도 있다.</p>\n<ul>\n<li><strong>장점</strong></li>\n<li>낮은 비용으로 시스템을 구축 할 수 있다.</li>\n<li>서버의 대수를 늘릴 수 있어 확장성이 높다</li>\n<li><strong>단점</strong></li>\n<li>대수가 늘어나면 관리 구조가 복잡해진다.</li>\n<li>한대가 망가지면 영향 범위를 최소화 하기 위한 구조를 검토해야 한다.</li>\n</ul>\n<h2 id=\"물리적-서버--논리적-서버\" style=\"position:relative;\"><a href=\"#%EB%AC%BC%EB%A6%AC%EC%A0%81-%EC%84%9C%EB%B2%84--%EB%85%BC%EB%A6%AC%EC%A0%81-%EC%84%9C%EB%B2%84\" aria-label=\"물리적 서버  논리적 서버 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>물리적 서버 &#x26; 논리적 서버</h2>\n<ul>\n<li>서버 : 특정한 역할에 특화된 것</li>\n<li>물리 서버 : 컴퓨터 자체(<strong>하드웨어</strong>)</li>\n<li>논리 서버 : 컴퓨터에서 동작하고 있는 <strong>소프트웨어</strong> e.g. DB 서버, 웹 서버..</li>\n</ul>\n<h2 id=\"수직-분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%A7%81-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"수직 분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수직 분할형 아키텍쳐</h2>\n<h3 id=\"1-클라이언트---서버형-아키텍쳐-cs\" style=\"position:relative;\"><a href=\"#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8---%EC%84%9C%EB%B2%84%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-cs\" aria-label=\"1 클라이언트   서버형 아키텍쳐 cs permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 클라이언트 - 서버형 아키텍쳐 (C/S)</h3>\n<p>클라이언트(=단말, 소형 컴퓨터) 측에 전용 소프트웨어를 설치함. 화면 표시나 단순 계산을 클라이언트(단말)에서 실행하고, 필요한 경우 서버에 의뢰함. 클라이언트-서버가 역할 별로 분할(수직 분할) 되어 있음.</p>\n<ul>\n<li>장점</li>\n<li>클라이언트 측에 많은 처리를 실행 할 수 있어서 소수의 서버로 다수의 클라이언트를 처리 할 수 있음</li>\n<li>단점</li>\n<li>클라리언트 측의 소프트웨어 정기 업데이트가 필요. (사용자가 업데이트를 반드시 한다는 보장이 없어, 시스템 위험 요소가 될 수 있음)</li>\n<li>서버 확장성에 한계가 발생 할 수 있음</li>\n</ul>\n<h3 id=\"2-3계층형-아키텍쳐\" style=\"position:relative;\"><a href=\"#2-3%EA%B3%84%EC%B8%B5%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"2 3계층형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 3계층형 아키텍쳐</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">     **웹 서버**                      **AP 서버**                    **DB 서버**  \n+--------------+.           +--------------+           +----------+\n| 프레젠테이션 계층 | &lt;-------&gt; | 애플리케이션 계층 | &lt;-------&gt; | 데이터 계층 |\n+--------------+.           +--------------+.          +----------+\n- 사용자 입력을 받는다.          - 사용자 요청에 따라         - 애플리케이션 요청에 따라\n- 웹 브라우저 화면을 표시한다        업무를 처리한다.            데이터 입출력을 한다.            </code></pre></div>\n<ul>\n<li>장점</li>\n<li>서버 부하 집중 개선</li>\n<li>클라이언트 단말의 정기 업데이트가 불필요 (클라이언트는 브라우저만 있으면 됨)</li>\n<li>'처리 반환'에 의한 서버 부하 저감</li>\n<li>단점</li>\n<li>구조가 c/s 구성보다 복잡</li>\n</ul>\n<h2 id=\"수평-분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%88%98%ED%8F%89-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"수평 분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수평 분할형 아키텍쳐</h2>\n<h3 id=\"1-단순-수평-분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#1-%EB%8B%A8%EC%88%9C-%EC%88%98%ED%8F%89-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"1 단순 수평 분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 단순 수평 분할형 아키텍쳐</h3>\n<p>시스템을 둘로 분할하여, 시스템 전체 처리 성능을 두배로 향상시킴. 또한, 두개의 독립된 시스템이 생성되기에 A측 시스템 장애가 발생해도 B측 시스템에는 전혀 영향을 주지 않음</p>\n<p>하지만 A와 B가 같은 애플리케이션을 이용하고 있다면 애플리케이션 업데이트를 양쪽 시스템에 매번 실시해주어야 한다.</p>\n<p>데이터도 A와 B가 따로 보유하고 있어, 양쪽 데이터를 동시에(일원화해서) 이용 할 수 없음.</p>\n<p>한쪽 시스템에 이용자가 대부분 몰리는 경우, 한쪽에만 과부하가 걸리고 리소스가 낭비됨</p>\n<p>이 구조는 주로 지리적으로 멀리 떨어진 시스템에 이용됨. e.g. 공장처럼 각 지점이 완전히 독립적으로 운영될 경우</p>\n<ol>\n<li>분할한 시스템이 독립적으로 운영되므로 서로에게 영향을 주지 않음</li>\n<li>장점</li>\n<li>수평으로 서버를 늘리기 때문에 확장성이 향상됨</li>\n<li>단점</li>\n<li>데이터를 일원화해서 볼 수 없다</li>\n<li>애플리케이션 업데이트는 양쪽을 동시에 해주어야 한다</li>\n</ol>\n<h3 id=\"2-공유형-아키텍쳐\" style=\"position:relative;\"><a href=\"#2-%EA%B3%B5%EC%9C%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"2 공유형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 공유형 아키텍쳐</h3>\n<p>단순 분할형과 달리 일부 계층에서 상호 접속이 이루어짐 (e.g. 데이터를 동기 처리)</p>\n<ul>\n<li>장점</li>\n<li>수평으로 서버를 늘리기때문에 확장성이 향상</li>\n<li>분할한 시스템이 서로 다른 시스템에 데이터를 참조 할 수 있다.</li>\n<li>단점</li>\n<li>분할한 시스템간 독립성이 낮아진다</li>\n<li>공유한 계층의 확장성이 낮아진다.</li>\n</ul>\n<h2 id=\"가상화-구성\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94-%EA%B5%AC%EC%84%B1\" aria-label=\"가상화 구성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상화 구성</h2>\n<p>하나의 물리서버에 여러대의 가상화 서버를 운영하며, 이 물리 서버도 이중화하여 한대가 망가지더라도 계속 운영 가능</p>\n<h2 id=\"지리-분할형-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EB%A6%AC-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"지리 분할형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지리 분할형 아키텍쳐</h2>\n<h3 id=\"1-스탠바이형-아키텍쳐\" style=\"position:relative;\"><a href=\"#1-%EC%8A%A4%ED%83%A0%EB%B0%94%EC%9D%B4%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"1 스탠바이형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 스탠바이형 아키텍쳐</h3>\n<p>물리 서버를 최소 두대 이상 준비하여 한대가 고장나면 가동중인 소프트웨어를 다른 한대로 옮겨서 운영하는 방식</p>\n<p>이때, 소프트웨어 재시작을 자동으로 하는 구조를 <strong>페일오버(failover)</strong> 라고 한다.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/252dc7e8-f0a3-45dc-97b0-e01732a42027/D7F8D9E5-15A7-427D-95E0-82F95301EB85.jpeg\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/252dc7e8-f0a3-45dc-97b0-e01732a42027/D7F8D9E5-15A7-427D-95E0-82F95301EB85.jpeg\"></p>\n<ul>\n<li>스탠바이 서버가 액티브 서버에 계속 하트비트를 날리며 상태를 체크함. 응답이 없을 경우 문제가 생긴 것으로 간주하고 스탠바이 서버를 기동함</li>\n</ul>\n<p>물리 서버 고장에는 대처 할 수 있지만 보통 때는 페일오버 대상 서버(스탠바이)가 놀고 있는 상태가 되기 때문에 리소스 측면에서 낭비 발생</p>\n<p>이 문제를 해결하기 위해 스탠바이를 따로 두지 않고 양쪽 서버를 동시에 교차 이용(한쪽이 고장나면 다른 한쪽이 양쪽을 처리) 하는 경우도 많다.</p>\n<h3 id=\"2-재난-대책형-아키텍쳐\" style=\"position:relative;\"><a href=\"#2-%EC%9E%AC%EB%82%9C-%EB%8C%80%EC%B1%85%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"2 재난 대책형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 재난 대책형 아키텍쳐</h3>\n<p>서버 장비를 최소 구성 및 동시 구성으로 별도 사이트에 배치하고 소프트웨어 상용 환경과 동일하게 설정한다. 재난 발생 시, 전혀 다른 사이트에 있는 정보를 이용하게 됨. 여기서 중요한 건 애플리케이션 최신 화와 데이터 최신 화이다.</p>\n<h2 id=\"클라우드형-아키텍쳐\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"클라우드형 아키텍쳐 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라우드형 아키텍쳐</h2>\n<p>서버가 가상화 돼 있어서 사용자는 어느 물리 서버에서 동작하는지 모른다.</p>\n<p>클라우드 세계에서는 어떤 계층을 클라우드 상에 배치하는가에 따라 명칭이 달라진다.</p>\n<ul>\n<li>SaaS :  서버 뿐만 아니라 애플리케이션을 포함한 업무 시스템을 클라우드 서비스 회사가 제공하기 때문에, 사용자는 인프라를 의식할 필요가 없다.</li>\n<li>반면 PaaS(Platform as a Service), IaaS(Infrastructure as a Service), DBaaS(Database as s Service) 등에서는 일반적인 3계층형 시스템을 구성하는 서버의 일부 혹은 전부를 클라우드 상의 리소스로 대체한다.</li>\n</ul>\n<h1 id=\"물리-서버\" style=\"position:relative;\"><a href=\"#%EB%AC%BC%EB%A6%AC-%EC%84%9C%EB%B2%84\" aria-label=\"물리 서버 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>물리 서버</h1>\n<p>서버는 <strong>랙(rack)</strong>이라는 것에 장착된다.</p>\n<p>서버 외에도 HDD가 가득 장착된 저장소나 인터넷 및 LAN을 연결하기 위한 스위치 등 탑재</p>\n<ul>\n<li>서버 설치시에 중요한 정보</li>\n<li>서버 크기 (U)</li>\n<li>소비 전력 (A)</li>\n<li>중량 (kg)</li>\n</ul>\n<h1 id=\"일반적인-서버-형태\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EC%84%9C%EB%B2%84-%ED%98%95%ED%83%9C\" aria-label=\"일반적인 서버 형태 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반적인 서버 형태</h1>\n<h2 id=\"서버-내부-구성\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%84%B1\" aria-label=\"서버 내부 구성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 내부 구성</h2>\n<p>컴포넌트는 PC와 동일하다. 단, 전원이 이중화 되어있어 장애에 강하다거나 대용량 CPU, 메모리가 탑재되어 있는 정도가 다름</p>\n<ul>\n<li><strong>CPU, 메모리, HDD 등 컴포넌트를 연결하는 선 = 버스</strong></li>\n</ul>\n<h1 id=\"cpu-central-processing-unit\" style=\"position:relative;\"><a href=\"#cpu-central-processing-unit\" aria-label=\"cpu central processing unit permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CPU (Central Processing Unit)</h1>\n<p>서버 중심에 위치하여 <strong>연산 처리</strong>를 한다.</p>\n<p>CPU는 명령을 받아서 연산을 실행하고, 결과를 반환한다. 명령과 데이터는 기억장치나 입출력 장치를 통해 전달된다.현재는 이 <strong>CPU를 '코어'</strong> 라고 하며, 하나의 CPU에 <strong>여러 개의 코어가 존재하는 멀티코어화가 진행</strong>되고 있다.</p>\n<p>명령은 누가 내리는 걸까 ⇒ <strong>운영체제(OS)</strong></p>\n<p>그럼 누가 OS에 명령을 내리는 걸까 ⇒ OS상에서 동작하는 웹서버나 데이터베이스의 실체인 <strong>'프로세스'</strong>와 사용자 <strong>키보드, 마우스를 통한 입력</strong>. CPU가 자발적으로 처리하지 않음</p>\n<p>여기서 키보드나 마우스가 하는 처리를 <strong>끼어들기(interrupt)</strong>라고 함</p>\n<h1 id=\"메모리\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC\" aria-label=\"메모리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리</h1>\n<p>기억 영역으로 CPU 옆에 위치하여 <strong>CPU에 전달하는 내용이나 데이터를 저장하거나 처리 결과를 받는다.</strong></p>\n<p>메모리에 저장되는 데이터는 <strong>영구성이 없다</strong>. 즉, <strong>서버를 재시작하면 없어지는 정보</strong>이다.</p>\n<p>이런 결점에도 메모리를 사용하는 이유는 <strong>메모리 액세스가 매우 빠르게 이루어지기 때문</strong>이다.</p>\n<p>그리고 데이터 저장 시에 물리적인 모터 등을 구동하는 것이 아니라 <strong>전기 적인 처리 만으로 데이터를 저장</strong>하기 때문이다.</p>\n<p>그런데 <strong>CPU 자체에도 메모리</strong>를 가지고 있다. 이것은 레지스터나 1차(L1) / 2차(L2) 캐시라 불리며 CPU 내부에 존재한다.</p>\n<p>메모리보다 빠르지만 용량이 메모리에 비해 매우 작음</p>\n<p><strong>빈번하게 사용</strong>하는 데이터, 명령 순서대로 <strong>CPU에 가까운 쪽에 캐시</strong> 된다.</p>\n<p>캐시를 여러 단에 배치하여 대기 시간을 줄인다.</p>\n<p>왜 메모리 영역이 몇개나 존재할까? ⇒ 메모리를 사용하려면, 메모리 컨트롤러를 경유하여, 일단 CPU 밖으로 나가야함. 고속 CPU에서는 이런 처리 지연(latency) 조차 허용하지 않는다.</p>\n<p><strong>처리 지연을 줄이기 위해 가장 자주 사용하는 명령/데이터를 코어 가까운 곳에 배치</strong>하는 것이다. </p>\n<p>영역이 여러 단계로 나누어져 있는 이유 ⇒ 일반적으로 캐시 메모리가 커질 수록 액세스 속도가 느려짐</p>\n<p>여러 단계에 배치하여 초고속으로 액세스 하고 싶은 데이터는 L1 캐시에, 고속은 L2 캐시에 두는 형태로 만든 것.</p>\n<p>또한, 메모리에는 미리 데이터를 CPU에 전달하여 처리 지연을 줄이는 <strong>메모리 인터리빙(Memory Interleaving)</strong> 기능이 있다.</p>\n<ul>\n<li>모든 채널의 동일 뱅크에 메모리를 배치함</li>\n<li>최대 3개의 채널을 사용해 데이터 1을 요구하면 데이터 2,3도 함께 보냄</li>\n</ul>\n<p>이것은 대부분 데이터가 연속적으로 액세스 한다는 규칙을 기반으로 만들어짐</p>\n<h1 id=\"io-장치\" style=\"position:relative;\"><a href=\"#io-%EC%9E%A5%EC%B9%98\" aria-label=\"io 장치 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I/O 장치</h1>\n<h2 id=\"하드디스크-드라이브hdd-자기-디스크\" style=\"position:relative;\"><a href=\"#%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B8%8Chdd-%EC%9E%90%EA%B8%B0-%EB%94%94%EC%8A%A4%ED%81%AC\" aria-label=\"하드디스크 드라이브hdd 자기 디스크 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하드디스크 드라이브(HDD) (=자기 디스크)</h2>\n<p><strong>장기 저장 목적의 데이터 저장 장소.</strong> 메모리와 같은 기억 영역이지만 액세스 속도가 다르며, 전기가 흐르는지 여부에 따라 데이터 손실 여부가 다르다.</p>\n<p>메모리는 전기가 흐르지 않으면 데이터가 사라지며, 디스크는 <strong>전기가 없어도 데이터가 사라지지 않는다.</strong></p>\n<p>고속으로 원반을 회전해서 읽기/쓰기를 하는 회전 구조 때문에 속도가 <strong>물리 법칙에 좌우</strong>되며, 메모리 처럼 <strong>순식간에 액세스 할 수 없다.</strong> 일반적으로 수 밀리초 ~ 수십 밀리초 정도의 시간이 걸린다. (메모리는 수 ~ 수십 마이크로초) </p>\n<p>최근에는 기술이 발달하여 SSD(Solid State Disk)라는 <strong>물리적인 회전 요소를 사용하지 않는 디스크</strong>가 사용 되고 있다. SSD의 등장으로 메모리-기억 장치 간 속도 차이가 거의 없어지고 있다.</p>\n<p>또한, HDD가 많이 탑재돼 있는 하드웨어를 <strong>스토리지(Storage, 저장소)</strong> 라고 한다.</p>\n<p>저장소는 I/O의 서브 시스템 이라고도 불리는 장치로서, 내부에는 CPU와 캐시가 존재하고 수많은 HDD외에도 여러 기능을 탑재하고 있다.</p>\n<p>서버와 I/O 시에는 HDD가 직접 데이터 교환을 하는 것이 아니라 캐시를 통해 한다.</p>\n<h2 id=\"네트워크-인터페이스-nic\" style=\"position:relative;\"><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-nic\" aria-label=\"네트워크 인터페이스 nic permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>네트워크 인터페이스 (NIC)</h2>\n<p>서버와 외부 장비를 연결하기 위한 것으로 <strong>외부 접속용 인터페이스</strong>이다.</p>\n<h2 id=\"io-제어\" style=\"position:relative;\"><a href=\"#io-%EC%A0%9C%EC%96%B4\" aria-label=\"io 제어 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I/O 제어</h2>\n<ul>\n<li>CPU 사이에 있는 버스도 외부 I/O와 같은 아키텍쳐를 사용하고 있다</li>\n<li>HDD와 DVD의 I/O의 경로는 물리적으로 다르다.</li>\n<li><strong>IOH(I/O 핸들러)</strong> : CPU와 가까운 곳에 있어 노스 브릿지(North Bridge) 라고 함</li>\n<li><strong>ICH(I/O 컨트롤러)</strong> : 사우스 브릿지(South Bridge) 라고 함</li>\n<li>PCI의 x8, x16은 I/O 회선의 개수. e.g. x8은 8선</li>\n</ul>\n<h1 id=\"버스\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EC%8A%A4\" aria-label=\"버스 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버스</h1>\n<p>서버 내부에 있는 <strong>컴포넌트들을 서로 연결시키는 회선</strong>을 가르킨다.</p>\n<p>버스에서 제일 중요한건 어느 정도의 데이터 전송 능력을 가지고 있느냐 이다.</p>\n<h2 id=\"대역\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%97%AD\" aria-label=\"대역 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대역</h2>\n<p>원래는 주파수 대역을 의미하지마 , IT 인프라에서는 <strong>데이터 전송 능력</strong>을 의미함.</p>\n<p>대역은 '한번에 데이터를 보낼 수 있는 데이터의 폭(전송폭)', '1초에 전송 할 수 있는 횟수(전송 횟수)'로 결정된다.</p>\n<p>전송 횟수 = 1초 / 1초당 소요 시간(응답시간)</p>\n<p>대역 = 전송폭 x 전송 횟수</p>\n<h3 id=\"버스-대역\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EC%8A%A4-%EB%8C%80%EC%97%AD\" aria-label=\"버스 대역 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버스 대역</h3>\n<p>CPU에 가까울 수록 1초당 전송량이 큼. 버스 흐름에서 중요한건 CPU와 장치 사이에 <strong>병목 현상(bottleneck)이 없어야 한다</strong>는 것</p>\n<h1 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h1>\n<h1 id=\"추가\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80\" aria-label=\"추가 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가</h1>\n<ul>\n<li>메인보드 : 핵심 부품이 장착되는 회로 기판</li>\n<li>쿨러 : CPU의 열을 식혀 주는 역할</li>\n<li>파워 : 메인보드에 전기 공급</li>\n<li>GPU : VGA에 있는 프로세스로 그래픽 연산을 함.</li>\n<li>모니터 : 숫자로 된 정보를 받아서 가시광선 형태의 정보로 보여주는 시각화 도구</li>\n<li>우리가 말하는 USB는 USB 인터페이스 규격에 연결되는 USB Disk임. 썸디스크라고도 함</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/cs/book-it-infra/#%EC%9D%B8%ED%94%84%EB%9D%BC-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">인프라 아키텍쳐</a></p>\n<ul>\n<li>\n<p><a href=\"/cs/book-it-infra/#%EC%A7%91%EC%95%BD%ED%98%95--%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">집약형 &#x26; 분할형 아키텍쳐</a></p>\n<ul>\n<li><a href=\"/cs/book-it-infra/#1-%EC%A7%91%EC%95%BD%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">1. 집약형 아키텍쳐</a></li>\n<li><a href=\"/cs/book-it-infra/#2-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">2. 분할형 아키텍쳐</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/book-it-infra/#%EB%AC%BC%EB%A6%AC%EC%A0%81-%EC%84%9C%EB%B2%84--%EB%85%BC%EB%A6%AC%EC%A0%81-%EC%84%9C%EB%B2%84\">물리적 서버 &#x26; 논리적 서버</a></li>\n<li>\n<p><a href=\"/cs/book-it-infra/#%EC%88%98%EC%A7%81-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">수직 분할형 아키텍쳐</a></p>\n<ul>\n<li><a href=\"/cs/book-it-infra/#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8---%EC%84%9C%EB%B2%84%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-cs\">1. 클라이언트 - 서버형 아키텍쳐 (C/S)</a></li>\n<li><a href=\"/cs/book-it-infra/#2-3%EA%B3%84%EC%B8%B5%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">2. 3계층형 아키텍쳐</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/cs/book-it-infra/#%EC%88%98%ED%8F%89-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">수평 분할형 아키텍쳐</a></p>\n<ul>\n<li><a href=\"/cs/book-it-infra/#1-%EB%8B%A8%EC%88%9C-%EC%88%98%ED%8F%89-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">1. 단순 수평 분할형 아키텍쳐</a></li>\n<li><a href=\"/cs/book-it-infra/#2-%EA%B3%B5%EC%9C%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">2. 공유형 아키텍쳐</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/book-it-infra/#%EA%B0%80%EC%83%81%ED%99%94-%EA%B5%AC%EC%84%B1\">가상화 구성</a></li>\n<li>\n<p><a href=\"/cs/book-it-infra/#%EC%A7%80%EB%A6%AC-%EB%B6%84%ED%95%A0%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">지리 분할형 아키텍쳐</a></p>\n<ul>\n<li><a href=\"/cs/book-it-infra/#1-%EC%8A%A4%ED%83%A0%EB%B0%94%EC%9D%B4%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">1. 스탠바이형 아키텍쳐</a></li>\n<li><a href=\"/cs/book-it-infra/#2-%EC%9E%AC%EB%82%9C-%EB%8C%80%EC%B1%85%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">2. 재난 대책형 아키텍쳐</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/book-it-infra/#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C%ED%98%95-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\">클라우드형 아키텍쳐</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/book-it-infra/#%EB%AC%BC%EB%A6%AC-%EC%84%9C%EB%B2%84\">물리 서버</a></li>\n<li>\n<p><a href=\"/cs/book-it-infra/#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EC%84%9C%EB%B2%84-%ED%98%95%ED%83%9C\">일반적인 서버 형태</a></p>\n<ul>\n<li><a href=\"/cs/book-it-infra/#%EC%84%9C%EB%B2%84-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%84%B1\">서버 내부 구성</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/book-it-infra/#cpu-central-processing-unit\">CPU (Central Processing Unit)</a></li>\n<li><a href=\"/cs/book-it-infra/#%EB%A9%94%EB%AA%A8%EB%A6%AC\">메모리</a></li>\n<li>\n<p><a href=\"/cs/book-it-infra/#io-%EC%9E%A5%EC%B9%98\">I/O 장치</a></p>\n<ul>\n<li><a href=\"/cs/book-it-infra/#%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B8%8Chdd-%EC%9E%90%EA%B8%B0-%EB%94%94%EC%8A%A4%ED%81%AC\">하드디스크 드라이브(HDD) (=자기 디스크)</a></li>\n<li><a href=\"/cs/book-it-infra/#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-nic\">네트워크 인터페이스 (NIC)</a></li>\n<li><a href=\"/cs/book-it-infra/#io-%EC%A0%9C%EC%96%B4\">I/O 제어</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/cs/book-it-infra/#%EB%B2%84%EC%8A%A4\">버스</a></p>\n<ul>\n<li>\n<p><a href=\"/cs/book-it-infra/#%EB%8C%80%EC%97%AD\">대역</a></p>\n<ul>\n<li><a href=\"/cs/book-it-infra/#%EB%B2%84%EC%8A%A4-%EB%8C%80%EC%97%AD\">버스 대역</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/cs/book-it-infra/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/cs/book-it-infra/#%EC%B6%94%EA%B0%80\">추가</a></li>\n</ul>","frontmatter":{"title":"그림으로 공부하는 IT 인프라 구조","date":"July 22, 2020","category":"IT Infra","tags":["IT Infra","Book"],"featuredImage":{"childImageSharp":{"original":{"src":"/static/thumbnail-7dac86e01c60def80581899a00e9520d.png","width":1300,"height":350}}}}}},"pageContext":{"slug":"/cs/book-it-infra","previous":{"id":"f06859ad-9a28-5b80-aebf-d68b6d96fefe","fields":{"slug":"/algorithm/programers-level2-js"},"frontmatter":{"title":"[JS] Level2 문제 풀기","tags":["Programers","Coding Test","Javascript"]}},"next":{"id":"4ea18c79-b1f0-521b-b44c-7961830b64ab","fields":{"slug":"/cs/base64"},"frontmatter":{"title":"Base64란","tags":["IT Infra","Book"]}}}}}