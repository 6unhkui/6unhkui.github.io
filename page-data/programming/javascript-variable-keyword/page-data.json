{"componentChunkName":"component---src-templates-post-tsx","path":"/programming/javascript-variable-keyword","result":{"data":{"site":{"siteMetadata":{"author":"Inkyung"}},"markdownRemark":{"fields":{"slug":"/programming/javascript-variable-keyword"},"id":"2ab62a08-8a21-59db-977f-a0dedf432aed","excerpt":"모던 자바스크립트 Deep Dive를 읽고 학습한 내용을 간략하게 정리한 글입니다.\n자바스크립트 기본 개념과 동작 원리를 잘 다루고 있는 책입니다. 상세한 내용은 책을 참고해주세요. 변수 선언에 사용되는 var키워드와 var 키워드의 단점을 극복하기 위해 ES6 이후에 등장한 let…","html":"<blockquote>\n<p><a href=\"http://www.yes24.com/Product/Goods/92742567\" target=\"_blank\" rel=\"noreferrer noopener\">모던 자바스크립트 Deep Dive</a>를 읽고 학습한 내용을 간략하게 정리한 글입니다.<br/>\n자바스크립트 기본 개념과 동작 원리를 잘 다루고 있는 책입니다. 상세한 내용은 책을 참고해주세요.</p>\n</blockquote>\n<p>변수 선언에 사용되는 var키워드와 var 키워드의 단점을 극복하기 위해 ES6 이후에 등장한 let, const 키워드의 차이점에 대해 알아보자</p>\n<h1 id=\"var\" style=\"position:relative;\"><a href=\"#var\" aria-label=\"var permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>var</h1>\n<h2 id=\"1-중복-선언-가능\" style=\"position:relative;\"><a href=\"#1-%EC%A4%91%EB%B3%B5-%EC%84%A0%EC%96%B8-%EA%B0%80%EB%8A%A5\" aria-label=\"1 중복 선언 가능 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 중복 선언 가능</h2>\n<p>var 키워드로 선언된 변수는 <strong>중복 선언이 가능</strong>하다.<br/>\n이로 인해 먼저 선언하여 사용되던 변수가 의도치 않게 중복 선언이 되도 에러가 발생하지 않는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Serina'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이미 선언된 변수의 중복 선언이 가능하다</span></code></pre></div>\n<h2 id=\"2-스코프--함수-레벨\" style=\"position:relative;\"><a href=\"#2-%EC%8A%A4%EC%BD%94%ED%94%84--%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8\" aria-label=\"2 스코프  함수 레벨 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 스코프 : 함수 레벨</h2>\n<p>var 키워드의 스코프<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>는 <strong>함수 레벨</strong>로 규정된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\n<span class=\"token comment\">// 함수 레벨 스코프를 따르기 때문에 if문 블록에서 score 변수에 값을 할당할 경우 블록 밖의 변수로 재선언된다.</span></code></pre></div>\n<h2 id=\"3-변수-호이스팅\" style=\"position:relative;\"><a href=\"#3-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"3 변수 호이스팅 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 변수 호이스팅</h2>\n<p>변수를 선언하고 사용하기 위해서는 3가지 단계를 거친다.</p>\n<ol>\n<li>선언 단계</li>\n<li>초기화 단계</li>\n<li>할당 단계\n<br/><br/></li>\n</ol>\n<p>변수를 포함한 모든 식별자는 자바스크립트 엔진에 의해 런타임 이전에 평가 단계에서 먼저 선언된다.(<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>호이스팅)<br/>\n이때, var 키워드로 선언한 변수는 선언과 동시에 <strong>undefined로 암묵적인 초기화</strong>가 일어난다.<br/>\n코드가 한줄씩 실행되는 런타임 시에 실제 선언문 코드 이전에 변수를 참조할 수 있는 이유 역시 이때문이다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">var</span> name<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Jane'</span></code></pre></div>\n<h1 id=\"let\" style=\"position:relative;\"><a href=\"#let\" aria-label=\"let permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>let</h1>\n<h2 id=\"1-변수의-중복-선언-금지\" style=\"position:relative;\"><a href=\"#1-%EB%B3%80%EC%88%98%EC%9D%98-%EC%A4%91%EB%B3%B5-%EC%84%A0%EC%96%B8-%EA%B8%88%EC%A7%80\" aria-label=\"1 변수의 중복 선언 금지 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 변수의 중복 선언 금지</h2>\n<p>let 키워드는 동일한 이름의 <strong>변수가 중복 선언될 경우 문법 에러가 발생</strong>한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Serina'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError: Identifier 'name' has already been declared</span></code></pre></div>\n<h2 id=\"2-스코프--블록-레벨\" style=\"position:relative;\"><a href=\"#2-%EC%8A%A4%EC%BD%94%ED%94%84--%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8\" aria-label=\"2 스코프  블록 레벨 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 스코프 : 블록 레벨</h2>\n<p>let 키워드는 모든 코드 블록(함수, if문, for문, while문, try/catch문 등)을 지역 스코프로 인정하는 <strong>블록 레벨 스코프</strong>를 따른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> score <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> score <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span></code></pre></div>\n<h2 id=\"3-변수-호이스팅-1\" style=\"position:relative;\"><a href=\"#3-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-1\" aria-label=\"3 변수 호이스팅 1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 변수 호이스팅</h2>\n<p>let, const 키워드 역시 <strong>호이스팅으로 인해 런타임 이전의 소스 코드 평가 단계에서 변수의 선언문이 먼저 실행</strong>되어 실행 컨텍스트의 렉시컬 환경에 등록된다.<br/>\n하지만 var 키워드와는 달리 선언과 초기화가 동시에 일어나지 않는다. <strong>초기화는 런타임에 진행</strong>된다.<br/>\n그렇기 때문에 <strong>선언문 코드 이전에 변수를 참조할 경우 참조 에러가 발생</strong>하는 것이다.<br/>\n마치 <strong>호이스팅이 발생하지 않는 것처럼 보이지만, 변수(식별자)는 이미 실행 컨텍스트에 등록된 상태</strong>다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 아직 name 변수는 선언만 진행된 상태</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  ReferenceError: Cannot access 'name' before initialization</span>\n\n<span class=\"token comment\">// 실제 선언문 코드에 도달했을 때 초기화가 진행된다.</span>\n<span class=\"token keyword\">let</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 변수 선언문에서 초기화가 진행됨</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 할당</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Jane'</span></code></pre></div>\n<p>이렇듯 스코프 시작 지점 ~ 변수의 초기화가 이뤄지는 변수 선언문까지<br/>\n변수가 실행 컨텍스트에 존재하나 참조할 수 없는 이 구간을 <strong>일시적 사각 지대(Temporal Dead Zone, TDZ)</strong>라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ---</span>\n                   <span class=\"token comment\">//  |</span>\n                   <span class=\"token comment\">// TDZ</span>\n                   <span class=\"token comment\">//  |</span>\n                   <span class=\"token comment\">// ---</span>\n<span class=\"token keyword\">let</span> name<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이는 코드를 예측 가능하게 하고 잠재적인 버그를 줄일 수 있도록 해준다.</p>\n<h1 id=\"const\" style=\"position:relative;\"><a href=\"#const\" aria-label=\"const permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>const</h1>\n<p>const 키워드는 let 키워드와 동일한 특징을 가지고 있지만 const 키워드만의 특징도 가지고 있다.</p>\n<h2 id=\"1-선언과-초기화\" style=\"position:relative;\"><a href=\"#1-%EC%84%A0%EC%96%B8%EA%B3%BC-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"1 선언과 초기화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 선언과 초기화</h2>\n<p>const 키워드는 <strong>반드시 선언과 동시에 초기화를 진행</strong>해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError: Missing initializer in const declaration</span>\n<span class=\"token comment\">// const age = 20; // 선언과 초기화가 같이 되어야 한다</span></code></pre></div>\n<h2 id=\"2-재할당-금지\" style=\"position:relative;\"><a href=\"#2-%EC%9E%AC%ED%95%A0%EB%8B%B9-%EA%B8%88%EC%A7%80\" aria-label=\"2 재할당 금지 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 재할당 금지</h2>\n<p>재할당이 자유로운 var, let 키워드와 달리 <strong>const 키워드는 재할당 할 수 없다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nage <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//TypeError: Assignment to constant variable.</span></code></pre></div>\n<h2 id=\"3-상수\" style=\"position:relative;\"><a href=\"#3-%EC%83%81%EC%88%98\" aria-label=\"3 상수 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 상수</h2>\n<p>상수는 <strong>재할당이 금지된 변수</strong>를 말한다.<br/>\n여기서 주의해야 할 것은 <strong>값의 불변을 의미하는 것이 아니라는 점</strong>이다.<br/>\n원시 타입의 값은 재할당을 통해 값의 변경이 이뤄지기 때문에, const 키워드로 선언할 경우 값을 변경 할 수 없다.<br/>\n반면 <strong>객체 타입 값은 재할당 없이도 프로퍼티의 추가, 수정, 삭제 모두 가능</strong>하다.<br/>\n재할당 없이는 값의 변경이 불가능한 원시 타입과는 달리, <strong>객체 타입은 프로퍼티 값의 변경이 발생해도 참조 값이 변경되지 않기 때문</strong>이다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name <span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Serina'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {name: \"Serina\"}</span></code></pre></div>\n<h1 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h1>\n<ol>\n<li>ES6를 사용한다면 var 키워드를 사용하지 않는다.</li>\n<li>값의 재할당이 필요하다면 let 키워드, 재할당이 필요하지 않다면 const 키워드를 사용한다.</li>\n</ol>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>  식별자를 다른 코드가 참조 할 수 있는 식별자의 유효 범위</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>  스코프 내부에서 변수의 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트의 고유한 특성</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/programming/javascript-variable-keyword/#var\">var</a></p>\n<ul>\n<li><a href=\"/programming/javascript-variable-keyword/#1-%EC%A4%91%EB%B3%B5-%EC%84%A0%EC%96%B8-%EA%B0%80%EB%8A%A5\">1. 중복 선언 가능</a></li>\n<li><a href=\"/programming/javascript-variable-keyword/#2-%EC%8A%A4%EC%BD%94%ED%94%84--%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8\">2. 스코프 : 함수 레벨</a></li>\n<li><a href=\"/programming/javascript-variable-keyword/#3-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">3. 변수 호이스팅</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/programming/javascript-variable-keyword/#let\">let</a></p>\n<ul>\n<li><a href=\"/programming/javascript-variable-keyword/#1-%EB%B3%80%EC%88%98%EC%9D%98-%EC%A4%91%EB%B3%B5-%EC%84%A0%EC%96%B8-%EA%B8%88%EC%A7%80\">1. 변수의 중복 선언 금지</a></li>\n<li><a href=\"/programming/javascript-variable-keyword/#2-%EC%8A%A4%EC%BD%94%ED%94%84--%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8\">2. 스코프 : 블록 레벨</a></li>\n<li><a href=\"/programming/javascript-variable-keyword/#3-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-1\">3. 변수 호이스팅</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/programming/javascript-variable-keyword/#const\">const</a></p>\n<ul>\n<li><a href=\"/programming/javascript-variable-keyword/#1-%EC%84%A0%EC%96%B8%EA%B3%BC-%EC%B4%88%EA%B8%B0%ED%99%94\">1. 선언과 초기화</a></li>\n<li><a href=\"/programming/javascript-variable-keyword/#2-%EC%9E%AC%ED%95%A0%EB%8B%B9-%EA%B8%88%EC%A7%80\">2. 재할당 금지</a></li>\n<li><a href=\"/programming/javascript-variable-keyword/#3-%EC%83%81%EC%88%98\">3. 상수</a></li>\n</ul>\n</li>\n<li><a href=\"/programming/javascript-variable-keyword/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>","frontmatter":{"title":"var, let, const 키워드의 차이점","date":"December 03, 2020","category":"Javascript","tags":["Javascript","Book"],"featuredImage":{"childImageSharp":{"original":{"src":"/static/thumbnail-9c7858c3cc94ee3a2a0ef3939739ca67.png","width":1400,"height":350}}}}}},"pageContext":{"slug":"/programming/javascript-variable-keyword","previous":{"id":"f372d536-6704-548d-abc3-49771ca6cdc2","fields":{"slug":"/programming/javascript-function"},"frontmatter":{"title":"함수","tags":["Javascript","Book"]}},"next":{"id":"3d4d7a9d-90b9-5733-a7cf-b549c8c78c63","fields":{"slug":"/programming/javascript-construct-func"},"frontmatter":{"title":"생성자 함수","tags":["Javascript","Book"]}}}}}