{"componentChunkName":"component---src-templates-post-tsx","path":"/programming/javascript-construct-func","result":{"data":{"site":{"siteMetadata":{"author":"Inkyung"}},"markdownRemark":{"fields":{"slug":"/programming/javascript-construct-func"},"id":"3d4d7a9d-90b9-5733-a7cf-b549c8c78c63","excerpt":"모던 자바스크립트 Deep Dive를 읽고 학습한 내용을 간략하게 정리한 글입니다.\n자바스크립트 기본 개념과 동작 원리를 잘 다루고 있는 책입니다. 상세한 내용은 책을 참고해주세요. 생성자 함수 생성자 함수란 new…","html":"<blockquote>\n<p><a href=\"http://www.yes24.com/Product/Goods/92742567\" target=\"_blank\" rel=\"noreferrer noopener\">모던 자바스크립트 Deep Dive</a>를 읽고 학습한 내용을 간략하게 정리한 글입니다.<br/>\n자바스크립트 기본 개념과 동작 원리를 잘 다루고 있는 책입니다. 상세한 내용은 책을 참고해주세요.</p>\n</blockquote>\n<h1 id=\"생성자-함수\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\" aria-label=\"생성자 함수 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자 함수</h1>\n<p>생성자 함수란 <strong>new 연산자와 함께 호출하여 객체(인스턴스)를 생성하는 함수</strong>를 말한다.<br/>\n동일한 프로퍼티를 갖는 객체가 여러개일 경우, 매번 프로퍼티를 기술 하는 것은 비효율적이다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> jane <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name <span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> serina <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name <span class=\"token operator\">:</span> <span class=\"token string\">'Serina'</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>생성자 함수는 프로퍼티가 <strong>동일한 인스턴스를 생성하기 위한 탬플릿으로서 동작</strong>한다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> jane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> serina <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Serina'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자바스크립트에서 생성자 함수는 일반 함수와 비교하여 특별한 형식이 정해져있지 않다. (생성자 함수 식별자의 첫번째 문자를 대문자로 표기한 것은 관례일 뿐이다.)<br/>\n<strong>new 연산자를 사용해 함수를 호출하면 생성자 함수로서 동작</strong>하고, <strong>붙이지 않고 호출하면 일반 함수로서 동작</strong>한다.<br/>\n(단, 함수 선언문, 함수 표현식, class에 한해)<br/><br/></p>\n<p>이러한 동작 원리를 이해 위해서는 우선 내부 슬롯과 내부 메서드에 대한 이해가 필요하다.</p>\n<h1 id=\"함수의-내부-슬롯과-내부-메서드\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%EB%82%B4%EB%B6%80-%EC%8A%AC%EB%A1%AF%EA%B3%BC-%EB%82%B4%EB%B6%80-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"함수의 내부 슬롯과 내부 메서드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수의 내부 슬롯과 내부 메서드</h1>\n<p>내부 슬롯과 내부 메서드는 자바스크립트 엔진의 구현 알고리즘을 설명하기 위한 ECMAScript 사양에서 사용되는\n의사 프로퍼티(pseudo property)와 의사 메서드(pseudo method)다.<br/>\n직접 접근하거나 호출할 수는 없지만 일부는 접근 수단을 제공한다.<br/>\n함수도 객체이므로 일반 객체가 가지고 있는 내부 슬롯과 내부 메서드는 물론이고 함수 객체만을 위한 [[Enviroment]], [[FormalParameters]] 등의 내부 슬롯과 [[Call]]과 [[Construct]] 같은 내부 메서드를 추가로 가지고 있다.</p>\n<h2 id=\"내부-메서드-call과-construct\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EB%B6%80-%EB%A9%94%EC%84%9C%EB%93%9C-call%EA%B3%BC-construct\" aria-label=\"내부 메서드 call과 construct permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내부 메서드 [[Call]]과 [[Construct]]</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">[[Call]]</th>\n<th align=\"center\">[[Construct]]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">갖고 있는 함수 객체</td>\n<td align=\"center\">모든 함수</td>\n<td align=\"center\">생성자 함수로서 호출 될 수 있는 함수<br/>(함수 선언문, 함수 표현식, class)</td>\n</tr>\n<tr>\n<td align=\"center\">실행 시점</td>\n<td align=\"center\">일반 함수로서 호출 할 때 실행</td>\n<td align=\"center\">new 키워드와 함께 생성자 함수로서 호출 할 때 실행</td>\n</tr>\n</tbody>\n</table>\n<p>모든 함수 객체는 [[Call]] 내부 메서드를 가지고 있지만, 모든 함수가 [[Construct]] 내부 메서드를 가지고 있는 것은 아니다.<br/><br/>\n자바스크립트 엔진은 함수 정의를 평가하여 함수 객체를 생성할 때, 함수 정의 방식에 따라 함수를 constructor와 non-constructor로 구분한다. [[Construct]] 내부 메서드를 가지고 있는 함수는 constructor이며, 갖고 있지 않는 함수는 non-constructor다.</p>\n<ul>\n<li>constructor: 함수 선언문, 함수 표현식, class</li>\n<li>non-constructor: 메서드(ES6 메서드 축약 표현), 화살표 함수</li>\n</ul>\n<br/>\n<p>함수를 <strong>일반 함수로서 호출되면 함수 객체의 내부 메서드 [[Call]]이 실행</strong>되고, <strong>new 연산자와 함께 생성자 함수로서 호출되면 내부 메서드 [[Construct]]가 실행</strong>된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 일반적인 함수 호출 : [[Call]] 실행</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 생성자 함수 호출 : [[Construct]] 실행</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>[[Construct]] 내부 메서드가 존재하지 않는 non-constructor 함수를 new 키워드와 함께 생성자 함수로서 호출하면 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: func is not a constructor</span></code></pre></div>\n<h1 id=\"생성자-함수의-인스턴스-생성-방식\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EC%9D%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1-%EB%B0%A9%EC%8B%9D\" aria-label=\"생성자 함수의 인스턴스 생성 방식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자 함수의 인스턴스 생성 방식</h1>\n<p>생성자 함수의 역할은 <strong>프로퍼티 구조가 동일한 인스턴스를 생성</strong> 하기 위한 <strong>탬플릿(클래스)</strong>으로서 동작하여,<br/>\n<strong>인스턴스를 생성하는 것</strong>과 <strong>생성된 인스턴스를 초기화(인스턴스 프로퍼티 추가 및 초기값 할당)하는 것</strong> 이다.<br/>\n생성자 함수가 인스턴스를 생성하는 것은 필수이고, 생성된 인스턴스를 초기화하는 것은 옵션이다.<br/><br/></p>\n<h3 id=\"1-인스턴스-생성과-this-바인딩\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%EA%B3%BC-this-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"1 인스턴스 생성과 this 바인딩 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 인스턴스 생성과 this 바인딩</h3>\n<p>생성자 함수가 실행되면 암묵적으로 빈 객체가 생성된다. 이 빈 객체가 바로 암묵적으로 생성한 인스턴스다.<br/>\n암묵적으로 생성된 빈 객체, 즉 인스턴스는 <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>this에 <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>바인딩 된다. <br/>\n생성자 함수 내부의 this가 생성자 함수가 생성한 인스턴스를 가리키는 이유가 바로 이때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. 암묵적으로 인스턴스가 생성되고 this에 바인딩 된다.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Person {}</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-인스턴스-초기화\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"2 인스턴스 초기화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 인스턴스 초기화</h3>\n<p>this에 바인딩되어 있는 인스턴스를 초기화 한다.<br/>\n즉 this에 바인딩 되어 있는 인스턴스에 프로퍼티나 메서드를 추가하고, 생성자 함수가 인수로 전달받은 초기값을 인스턴스 프로퍼티에 할당하여 초기화하거나 고정값을 할당한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. 암묵적으로 인스턴스가 생성되고 this에 바인딩 됨된다.</span>\n  <span class=\"token comment\">// this = {}</span>\n\n  <span class=\"token comment\">// 2. 인스턴스 초기화</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-인스턴스-반환\" style=\"position:relative;\"><a href=\"#3-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B0%98%ED%99%98\" aria-label=\"3 인스턴스 반환 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 인스턴스 반환</h3>\n<p>생성자 함수 내부의 모든 처리가 끝나면 인스턴스가 바인딩 된 this를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. 암묵적으로 인스턴스가 생성되고 this에 바인딩 된다</span>\n  <span class=\"token comment\">// this = {}</span>\n\n  <span class=\"token comment\">// 2. 인스턴스 초기화</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. 완성된 인스턴스가 바인딩 된 this가 암묵적으로 반환된다</span>\n  <span class=\"token comment\">// retrun this;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>이때 명시적으로 객체를 반환할 경우, 암묵적인 this 반환이 무시된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> jane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {}</span></code></pre></div>\n<p>반드시 생성자 함수에서는 return문을 생략해야 한다.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>  자신이 속한 객체 또는 자신이 생성한 인스턴스를 가리키는 자기 참조 변수이다. 이 변수에 바인딩 될 값은 호출 시점에 결정된다.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>  식별자와 메모리 공간을 연결하는 과정</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li><a href=\"/programming/javascript-construct-func/#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\">생성자 함수</a></li>\n<li>\n<p><a href=\"/programming/javascript-construct-func/#%ED%95%A8%EC%88%98%EC%9D%98-%EB%82%B4%EB%B6%80-%EC%8A%AC%EB%A1%AF%EA%B3%BC-%EB%82%B4%EB%B6%80-%EB%A9%94%EC%84%9C%EB%93%9C\">함수의 내부 슬롯과 내부 메서드</a></p>\n<ul>\n<li><a href=\"/programming/javascript-construct-func/#%EB%82%B4%EB%B6%80-%EB%A9%94%EC%84%9C%EB%93%9C-call%EA%B3%BC-construct\">내부 메서드 [Call]과 [Construct]</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/programming/javascript-construct-func/#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EC%9D%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1-%EB%B0%A9%EC%8B%9D\">생성자 함수의 인스턴스 생성 방식</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/programming/javascript-construct-func/#1-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%EA%B3%BC-this-%EB%B0%94%EC%9D%B8%EB%94%A9\">1. 인스턴스 생성과 this 바인딩</a></li>\n<li><a href=\"/programming/javascript-construct-func/#2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%B4%88%EA%B8%B0%ED%99%94\">2. 인스턴스 초기화</a></li>\n<li><a href=\"/programming/javascript-construct-func/#3-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B0%98%ED%99%98\">3. 인스턴스 반환</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"생성자 함수","date":"December 04, 2020","category":"Javascript","tags":["Javascript","Book"],"featuredImage":{"childImageSharp":{"original":{"src":"/static/thumbnail-9c7858c3cc94ee3a2a0ef3939739ca67.png","width":1400,"height":350}}}}}},"pageContext":{"slug":"/programming/javascript-construct-func","previous":{"id":"2ab62a08-8a21-59db-977f-a0dedf432aed","fields":{"slug":"/programming/javascript-variable-keyword"},"frontmatter":{"title":"var, let, const 키워드의 차이점","tags":["Javascript","Book"]}},"next":{"id":"098a2443-ccbe-57a7-93fc-afdb7769ff85","fields":{"slug":"/programming/learn-webpack"},"frontmatter":{"title":"웹팩(Webpack) 개념 잡기","tags":["Front-End","Webpack"]}}}}}