{"version":3,"sources":["webpack:///./src/components/search.js","webpack:///./src/pages/dev.js","webpack:///./src/components/switcher.js","webpack:///./src/components/posts.js"],"names":["Search","input","searchValue","setSearchValue","useEffect","focus","className","icon","style","opacity","width","height","type","placeholder","ref","value","onChange","e","target","pageQuery","DevPage","data","location","useState","selectedCategory","setSelectedCategory","post","allMarkdownRemark","edges","title","length","items","categories","selectedItem","changeItem","posts","filter","s","toUpperCase","node","frontmatter","category","trim","indexOf","tags","findIndex","a","Swicher","data-category","onClick","dataset","map","v","i","key","fieldValue","name","defaultValue","Posts","postsToShow","setPostsToShow","_infiniteScroll","scrollHeight","Math","max","document","documentElement","body","scrollTop","clientHeight","window","addEventListener","slice","featuredImage","to","fields","slug","src","childImageSharp","resize","Thumbnail","dangerouslySetInnerHTML","__html","excerpt","tag","kebabCase"],"mappings":"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","file":"component---src-pages-dev-js-f72069f84a6b03e9cc70.js","sourcesContent":["import React, {useEffect} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst Search = ({searchValue, setSearchValue}) => {\n    let input;\n    useEffect(()=> {\n        input.focus();\n     }, []);\n\n    return (\n        <div className=\"search-wrap\">\n            <span className=\"ico-search\">\n                <FontAwesomeIcon icon={\"search\"} style={{opacity: '.15' , width: '1.5rem', height:'1.5rem'}}/>\n            </span>\n            <input type=\"text\" \n               placeholder=\"검색어를 입력하세요.\"\n               ref={(ref) => {input = ref;}}\n               value={searchValue} onChange={(e) => setSearchValue(e.target.value)}/>\n        </div>\n    )\n}\n\nexport default Search;","import React, {useState} from 'react';\nimport Layout from \"../components/layout\"\nimport Posts from \"../components/posts\";\nimport SEO from \"../components/seo\"\nimport Switcher from \"../components/switcher\";\nimport Search from \"../components/search\";\n\nconst DevPage = ({data, location}) => {\n  const [selectedCategory, setSelectedCategory] = useState('ALL');\n  const [searchValue, setSearchValue] = useState('');\n  const changeCategory = value => {\n    setSelectedCategory(value);\n    setSearchValue('');\n  };\n\n  const post = data.allMarkdownRemark.edges; \n\n  return (\n      <Layout location={location}>\n        <SEO title=\"Development\"/>\n\n        <section className=\"posts\">\n          <div className=\"container\">\n            {post.length > 0 && \n              <>\n                <Switcher items={data.allMarkdownRemark.categories} selectedItem={selectedCategory} changeItem={changeCategory} />\n                <Search searchValue={searchValue} setSearchValue={setSearchValue} />\n              </>\n            }\n\n            <Posts posts={post.filter((s) => {\n                // 선택된 카테고리가 ALL일 경우, 모든 포스트를 보여주고\n                // ALL이 아닐 경우, 선택한 카테고리와 카테고리가 일치하는 포스트만 필터링\n                if(selectedCategory.toUpperCase() === 'ALL') return s;\n                else return s.node.frontmatter.category.toUpperCase() === selectedCategory.toUpperCase()})\n              .filter((s) => {\n                // 검색어가 없을 경우, 모든 포스트를 보여주고\n                // 검색어가 있을 경우, 제목과 태그에 일치하는 포스트만 필터링\n                if(searchValue.trim().length === 0) return s;\n                else {\n                  if(s.node.frontmatter.title.toUpperCase().indexOf(searchValue.trim().toUpperCase()) !== -1) return s;\n                  else if(s.node.frontmatter.tags.findIndex(a => a.toUpperCase().indexOf(searchValue.trim().toUpperCase()) !== -1) !== -1) return s;\n                }})\n            }/>\n          </div>\n        </section>\n      </Layout>\n  )\n}\n\nexport default DevPage;\n\nexport const pageQuery = graphql`\nquery {\n    allMarkdownRemark(filter: { frontmatter: { menu: { eq: \"DEV\"} } }, sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            category\n            featuredImage {\n              childImageSharp{\n                resize(width: 700) {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n      categories : group(field: frontmatter___category) {\n        fieldValue\n      }\n    }\n}`","import React from 'react';\n\nexport default function Swicher({ items, selectedItem = 'ALL', changeItem}) {\n    return (\n        <>\n            {/** Switch UI (Desktop, Tablet) */}\n            <div className=\"switcher-wrap\">\n              <div className={'switcher-option ' + (selectedItem === 'ALL' && 'selected')} \n                  data-category=\"ALL\"\n                  onClick={(e) => {changeItem(e.target.dataset.category)}}>ALL</div>\n              {items.map((v, i) => \n                (<div key={i} \n                  className={'switcher-option ' + (selectedItem.toUpperCase() === `${v.fieldValue.toUpperCase()}` ? 'selected' : '')} \n                  data-category={v.fieldValue}\n                  onClick={(e) => {changeItem(e.target.dataset.category)}}>{v.fieldValue}</div>))}\n            </div>\n\n            {/** Select Box UI (Mobile) */}\n            <div className=\"select-wrap\">\n              <select name=\"category\" onChange={(e) => {changeItem(e.target.value)}} defaultValue={selectedItem}>\n                <option value=\"ALL\">ALL</option>\n                {items.map((v, i) => \n                    (<option value={v.fieldValue} key={i}>{v.fieldValue}</option>))}\n              </select>\n            </div>\n        </>\n    )\n}","import React, {useState, useEffect} from 'react';\nimport { kebabCase } from 'lodash';\nimport { Link } from \"gatsby\"\nimport Thumbnail from \"../../static/images/gradationBg.png\";\n\nconst showCount = 6;\nconst Posts = ({posts}) => {\n  const [postsToShow, setPostsToShow] = useState(showCount);\n  \n  useEffect(() => {\n    window.addEventListener('scroll', _infiniteScroll, true);\n  }, []);\n\n  function _infiniteScroll()  {\n    let scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n    let scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n    let clientHeight = document.documentElement.clientHeight;\n\n    if(scrollTop + clientHeight === scrollHeight) {\n      setPostsToShow(postsToShow + showCount);\n    }\n  }\n  \n  return (\n    <>\n      {/** Post List Area */}   \n      {posts.length > 0 ?\n        <>\n          {posts.slice(0, postsToShow).map((post, i) => {\n            const {title, category, tags, featuredImage} = post.node.frontmatter;\n            return (\n              <article key={i} >\n                <Link to={post.node.fields.slug}>\n                  <img src={featuredImage ? featuredImage.childImageSharp.resize.src : Thumbnail} />\n\n                  <div className=\"post-info\">\n                    <span className=\"category\">{category}</span>\n                    <h1 className=\"title\">\n                      {title}\n                    </h1>\n       \n                    <p className=\"summary\" dangerouslySetInnerHTML={{__html: post.node.excerpt,}}/> \n      \n                    <div className=\"tags-wrap\">\n                      {tags.map((tag, i) => (\n                        <span className='tag' key={i}><Link to={`/tags/${kebabCase(tag)}/`}>{'# ' + tag}</Link></span>\n                      ))}\n                    </div> \n                    </div>\n                </Link>\n              </article>\n          )})\n          }\n        </>\n      : \n      <div className=\"empty\">게시글이 존재하지 않습니다.</div>\n    }\n  </>\n  );\n};\n\nexport default Posts;"],"sourceRoot":""}