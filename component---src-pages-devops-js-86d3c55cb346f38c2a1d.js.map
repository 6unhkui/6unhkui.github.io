{"version":3,"sources":["webpack:///./src/components/switcher.js","webpack:///./src/pages/devops.js","webpack:///./static/images/gradationBg.png","webpack:///./src/components/search.js","webpack:///./src/components/postPage.js","webpack:///./src/components/posts.js"],"names":["Swicher","items","selectedItem","changeItem","className","data-category","onClick","e","target","dataset","category","map","v","i","key","toUpperCase","fieldValue","DevOpsPage","data","location","title","pageQuery","module","exports","Search","input","searchValue","setSearchValue","useEffect","focus","icon","style","opacity","width","height","type","placeholder","ref","value","onChange","PostPage","useState","selectedCategory","setSelectedCategory","post","allMarkdownRemark","edges","length","categories","posts","filter","s","node","frontmatter","trim","indexOf","tags","findIndex","a","Posts","view","postsToShow","setPostsToShow","_infiniteScroll","scrollHeight","Math","max","document","documentElement","body","scrollTop","clientHeight","window","addEventListener","slice","date","featuredImage","to","fields","slug","src","childImageSharp","resize","Thumbnail","dangerouslySetInnerHTML","__html","excerpt","tag","kebabCase"],"mappings":"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","file":"component---src-pages-devops-js-86d3c55cb346f38c2a1d.js","sourcesContent":["import React from 'react';\n\nexport default function Swicher({ items, selectedItem = 'ALL', changeItem}) {\n    return (\n        <>\n            {/** Switch UI (Desktop, Tablet) */}\n            <div className=\"switcher-wrap\">\n              <div className={'switcher-option ' + (selectedItem === 'ALL' && 'selected')} \n                  data-category=\"ALL\"\n                  onClick={(e) => {changeItem(e.target.dataset.category)}}>ALL</div>\n              {items.map((v, i) => \n                (<div key={i} \n                  className={'switcher-option ' + (selectedItem.toUpperCase() === `${v.fieldValue.toUpperCase()}` ? 'selected' : '')} \n                  data-category={v.fieldValue}\n                  onClick={(e) => {changeItem(e.target.dataset.category)}}>{v.fieldValue}</div>))}\n            </div>\n\n            {/** Select Box UI (Mobile) */}\n            {/* <div className=\"select-wrap\">\n              <select name=\"category\" defaultValue={selectedItem} onChange={(e) => {changeItem(e.target.value)}} >\n                <option value=\"ALL\">ALL</option>\n                {items.map((v, i) => \n                    (<option value={v.fieldValue} key={i}>{v.fieldValue}</option>))}\n              </select>\n            </div> */}\n        </>\n    )\n}","import React from 'react';\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostPage from '../components/postPage';\n\nconst DevOpsPage = ({data, location}) => {\n  return (\n      <Layout location={location}>\n        <SEO title=\"DevOps\"/>\n        <PostPage data={data}/>\n      </Layout>\n  )\n}\n\nexport default DevOpsPage;\n\nexport const pageQuery = graphql`\nquery {\n    allMarkdownRemark(filter: { frontmatter: { menu: { eq: \"devops\"} } }, sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            category\n            featuredImage {\n              childImageSharp{\n                resize(width: 700) {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n      categories : group(field: frontmatter___category) {\n        fieldValue\n      }\n    }\n}`","module.exports = __webpack_public_path__ + \"static/gradationBg-ede5f65187fb6614201d52efa7ce59b1.png\";","import React, {useEffect} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst Search = ({searchValue, setSearchValue}) => {\n    let input;\n    useEffect(()=> {\n        input.focus();\n     }, []);\n\n    return (\n        <div className=\"search-wrap\">\n            <span className=\"ico-search\">\n                <FontAwesomeIcon icon={\"search\"} style={{opacity: '.15' , width: '1.2rem', height:'1.2rem'}}/>\n            </span>\n            <input type=\"text\" \n               placeholder=\"검색어를 입력하세요.\"\n               ref={(ref) => {input = ref;}}\n               value={searchValue} onChange={(e) => setSearchValue(e.target.value)}/>\n        </div>\n    )\n}\n\nexport default Search;","import React, {useState} from 'react';\nimport Posts from \"./posts\";\nimport Switcher from \"./switcher\";\nimport Search from \"./search\";\n\nexport default function PostPage({data}) {\n  const [selectedCategory, setSelectedCategory] = useState('ALL');\n  const [searchValue, setSearchValue] = useState('');\n  const changeCategory = value => {\n    setSelectedCategory(value);\n    setSearchValue('');\n  };\n\n  const post = data.allMarkdownRemark.edges; \n\n  return ( \n        <section className=\"posts\">\n          <div className=\"container\">\n            {post.length > 0 && \n              <>\n                <Switcher items={data.allMarkdownRemark.categories} selectedItem={selectedCategory} changeItem={changeCategory} />\n                <Search searchValue={searchValue} setSearchValue={setSearchValue} />\n              </>\n            }\n\n            <Posts posts={post.filter((s) => {\n                // 선택된 카테고리가 ALL일 경우, 모든 포스트를 보여주고\n                // ALL이 아닐 경우, 선택한 카테고리와 카테고리가 일치하는 포스트만 필터링\n                if(selectedCategory.toUpperCase() === 'ALL') return s;\n                else return s.node.frontmatter.category.toUpperCase() === selectedCategory.toUpperCase()})\n              .filter((s) => {\n                // 검색어가 없을 경우, 모든 포스트를 보여주고\n                // 검색어가 있을 경우, 제목과 태그에 일치하는 포스트만 필터링\n                if(searchValue.trim().length === 0) return s;\n                else {\n                  if(s.node.frontmatter.title.toUpperCase().indexOf(searchValue.trim().toUpperCase()) !== -1) return s;\n                  else if(s.node.frontmatter.tags.findIndex(a => a.toUpperCase().indexOf(searchValue.trim().toUpperCase()) !== -1) !== -1) return s;\n                  return null;\n                }})\n            }/>\n          </div>\n        </section>\n  )\n}\n","import React, {useState, useEffect} from 'react';\nimport { kebabCase } from 'lodash';\nimport { Link } from \"gatsby\"\nimport Thumbnail from \"../../static/images/gradationBg.png\";\n\nconst showCount = 6;\nconst Posts = ({posts, view = \"card\"}) => {\n  const [postsToShow, setPostsToShow] = useState(showCount);\n  \n  useEffect(() => {\n    window.addEventListener('scroll', _infiniteScroll, true);\n  }, []);\n\n  function _infiniteScroll()  {\n    let scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n    let scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n    let clientHeight = document.documentElement.clientHeight;\n\n    if(scrollTop + clientHeight === scrollHeight) {\n      setPostsToShow(postsToShow + showCount);\n    }\n  }\n\n  return (\n    <>\n      {/** Post List Area */}   \n      {posts.length > 0 ?\n        <>\n          {posts.slice(0, postsToShow).map((post, i) => {\n            const {title, date, category, tags, featuredImage} = post.node.frontmatter;\n            return (\n              <article key={i} className={view}>\n                <Link to={post.node.fields.slug}>\n                  <img src={featuredImage ? featuredImage.childImageSharp.resize.src : Thumbnail} />\n\n                  <div className=\"post-info\">\n                    <p className=\"date\">{date}</p>\n                    <span className=\"category\">{category}</span>\n                    <h1 className=\"title\">\n                      {title}\n                    </h1>\n       \n                    <p className=\"summary\" dangerouslySetInnerHTML={{__html: post.node.excerpt,}}/> \n\n\n                    <div className=\"tags-wrap\">\n                      {tags.map((tag, i) => (\n                        <span className='tag' key={i}><Link to={`/tags/${kebabCase(tag)}/`}>{'# ' + tag}</Link></span>\n                      ))}\n                    </div> \n                    </div>\n                </Link>\n              </article>\n          )})\n          }\n        </>\n      : \n      <div className=\"empty\">게시글이 존재하지 않습니다.</div>\n    }\n  </>\n  );\n};\n\nexport default Posts;"],"sourceRoot":""}