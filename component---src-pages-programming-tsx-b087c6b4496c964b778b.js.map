{"version":3,"sources":["webpack:///./src/components/Post/posts.tsx","webpack:///./src/components/Filter/switcher.tsx","webpack:///./src/components/Filter/search.tsx","webpack:///./static/images/gradation-bg.png","webpack:///./src/components/Post/postSingle.tsx","webpack:///./src/pages/programming.tsx"],"names":["Category","Switcher","React","memo","items","selectedItem","onChange","handleChange","useCallback","event","target","dataset","category","className","map","item","i","key","toUpperCase","fieldValue","data-category","onClick","SearchIco","icon","Search","value","type","placeholder","Posts","data","allMarkdownRemark","allPosts","edges","categories","useState","posts","setPosts","postsToShow","setPostsToShow","searchValue","setSearchValue","All","selectedCategory","setSelectedCategory","categoryItems","_infiniteScroll","scrollHeight","Math","max","document","documentElement","body","scrollTop","clientHeight","state","filterPosts","filter","post","node","frontmatter","title","tags","length","includes","some","tag","useEffect","addEventListener","removeEventListener","onChangeCategory","trim","onChangeSearchInput","style","margin","slice","module","exports","PostSingle","date","featuredImage","slug","fields","excerpt","to","src","childImageSharp","resize","Thumbnail","dangerouslySetInnerHTML","__html","kebabCase","ProgrammingPage","location","pageQuery"],"mappings":"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","file":"component---src-pages-programming-tsx-b087c6b4496c964b778b.js","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport Switcher from \"../Filter/switcher\";\nimport Search from \"../Filter/search\";\nimport { Query } from \"../../interfaces/PostList\";\nimport PostSingle from \"./postSingle\";\n\ninterface Props {\n    data: Query;\n}\nenum Category {\n    All = \"ALL\"\n}\n\nconst SHOW_COUNT = 6;\n\nconst Posts: React.FC<Props> = ({ data }) => {\n    const {\n        allMarkdownRemark: { edges: allPosts, categories }\n    } = data;\n    const [posts, setPosts] = useState(allPosts);\n    const [postsToShow, setPostsToShow] = useState(SHOW_COUNT);\n    const [searchValue, setSearchValue] = useState(\"\");\n    const [selectedCategory, setSelectedCategory] = useState(Category.All);\n    const categoryItems = useState(() => [{ fieldValue: Category.All }, ...categories])[0];\n\n    useEffect(() => {\n        setPostsToShow(SHOW_COUNT);\n        setPosts(filterPosts);\n    }, [searchValue, selectedCategory]);\n\n    useEffect(() => {\n        document.addEventListener(\"scroll\", _infiniteScroll, false);\n        return () => {\n            document.removeEventListener(\"scroll\", _infiniteScroll, false);\n        };\n    }, []);\n\n    function _infiniteScroll() {\n        const scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n        const scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n        const clientHeight = document.documentElement.clientHeight;\n\n        if (scrollTop + clientHeight > scrollHeight - 300) {\n            setPostsToShow(state => state + SHOW_COUNT);\n        }\n    }\n\n    function filterPosts() {\n        return allPosts\n            .filter(post => {\n                const {\n                    node: {\n                        frontmatter: { category }\n                    }\n                } = post;\n                // 선택된 카테고리가 ALL 이거나, 선택된 카테고리와 리스트의 카테고리가 일치할 경우 true\n                return (\n                    selectedCategory.toUpperCase() === Category.All || category.toUpperCase() === selectedCategory.toUpperCase()\n                );\n            })\n            .filter(post => {\n                const {\n                    node: {\n                        frontmatter: { title, tags }\n                    }\n                } = post;\n                // 검색어가 없거나, 제목 혹은 태그가 일치할 경우 true\n                return (\n                    searchValue.length === 0 ||\n                    title.toUpperCase().includes(searchValue.toUpperCase()) ||\n                    tags.some(tag => tag.toUpperCase().includes(searchValue.toUpperCase()))\n                );\n            });\n    }\n\n    const onChangeCategory = useCallback(value => {\n        setSelectedCategory(value.trim());\n        setSearchValue(\"\");\n    }, []);\n\n    const onChangeSearchInput = useCallback(value => {\n        setSearchValue(value.trim());\n    }, []);\n\n    return (\n        <section className=\"posts-wrap\">\n            <div className=\"posts container\">\n                {allPosts.length > 0 && (\n                    <div className=\"filter-wrap\">\n                        <Switcher items={categoryItems} selectedItem={selectedCategory} onChange={onChangeCategory} />\n                        <Search onChange={onChangeSearchInput} value={searchValue} />\n                    </div>\n                )}\n\n                <div\n                    style={{\n                        margin: 0\n                    }}\n                >\n                    {posts.length > 0 ? (\n                        posts.slice(0, postsToShow).map((post, i) => <PostSingle data={post} key={i} />)\n                    ) : (\n                        <div className=\"empty\">게시글이 존재하지 않습니다.</div>\n                    )}\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default Posts;\n","import React, { useCallback } from \"react\";\nimport { Category } from \"../../interfaces/PostList\";\nimport propTypes from \"prop-types\";\n\ninterface Props {\n    items: Category[];\n    selectedItem: string;\n    onChange: (category: string) => void;\n}\n\nconst Switcher: React.FC<Props> = React.memo(({ items, selectedItem = \"ALL\", onChange }) => {\n    const handleChange = useCallback(event => {\n        onChange(event.target.dataset.category);\n    }, []);\n\n    return (\n        <div className=\"switcher-wrap\">\n            {items.map((item, i) => (\n                <div\n                    key={i}\n                    className={\n                        \"switcher-option \" + (selectedItem.toUpperCase() === item.fieldValue.toUpperCase() ? \"selected\" : \"\")\n                    }\n                    data-category={item.fieldValue}\n                    onClick={handleChange}\n                >\n                    {item.fieldValue}\n                </div>\n            ))}\n        </div>\n    );\n});\n\nexport default Switcher;\n","import React, { useCallback, useMemo } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\ninterface Props {\n    value: string;\n    onChange: (value: string) => void;\n}\n\nconst SearchIco = React.memo(() => {\n    return <FontAwesomeIcon icon={\"search\"} className=\"ico-search\" />;\n});\n\nconst Search: React.FC<Props> = React.memo(({ value, onChange }) => {\n    const handleChange = useCallback(event => {\n        onChange(event.target.value);\n    }, []);\n\n    return (\n        <div className=\"search-wrap\">\n            <SearchIco />\n            <input\n                type=\"text\"\n                placeholder=\"검색어를 입력하세요.\"\n                value={value}\n                onChange={handleChange}\n                className=\"search-input\"\n            />\n        </div>\n    );\n});\n\nexport default Search;\n","module.exports = __webpack_public_path__ + \"static/gradation-bg-ede5f65187fb6614201d52efa7ce59b1.png\";","import React from \"react\";\nimport Thumbnail from \"../../../static/images/gradation-bg.png\";\nimport { Link } from \"gatsby\";\nimport { kebabCase } from \"lodash\";\nimport { Edge } from \"../../interfaces/PostList\";\n\ninterface Props {\n    data: Edge;\n}\n\nconst PostSingle: React.FC<Props> = ({ data }) => {\n    const {\n        frontmatter: { title, date, category, tags, featuredImage },\n        fields: { slug },\n        excerpt\n    } = data.node;\n\n    return (\n        <article className=\"card\">\n            <Link to={slug}>\n                <img src={featuredImage ? featuredImage.childImageSharp.resize.src : Thumbnail} />\n\n                <div className=\"post-info\">\n                    <p className=\"date\">{date}</p>\n                    <span className=\"category\">{category}</span>\n                    <h1 className=\"title\">{title}</h1>\n\n                    <p className=\"summary\" dangerouslySetInnerHTML={{ __html: excerpt }} />\n\n                    <div className=\"tags-wrap\">\n                        {tags?.map((tag, i) => (\n                            <span className=\"tag\" key={i}>\n                                <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\n                            </span>\n                        ))}\n                    </div>\n                </div>\n            </Link>\n        </article>\n    );\n};\n\nexport default PostSingle;\n","import React from \"react\";\nimport Index from \"../components/Layout\";\nimport SEO from \"../components/seo\";\nimport Posts from \"../components/Post/posts\";\nimport { graphql } from \"gatsby\";\nimport { Query } from \"../interfaces/PostList\";\n\ninterface Props {\n    data: Query;\n    location: Location;\n}\nconst ProgrammingPage: React.FC<Props> = ({ data, location }) => (\n    <Index location={location}>\n        <SEO title=\"Programming\" />\n        <Posts data={data} />\n    </Index>\n);\n\nexport default ProgrammingPage;\n\nexport const pageQuery = graphql`\n    query {\n        allMarkdownRemark(\n            filter: { fields: { slug: { regex: \"/^/programming//\" } } }\n            sort: { fields: [frontmatter___date], order: DESC }\n        ) {\n            edges {\n                node {\n                    excerpt(format: PLAIN, truncate: true, pruneLength: 50)\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        tags\n                        category\n                        featuredImage {\n                            childImageSharp {\n                                resize(width: 700) {\n                                    src\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            categories: group(field: frontmatter___category) {\n                fieldValue\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}